@startuml
class HW.weapons.Sword {
+ int damage()
+ String toString()
}
class HW.warriors.Archer {
+ int distance()
+ String toString()
}
class HW.Seminar4OOP {
+ {static} void main(String[])
}
interface HW.protect.Protection {
~ int protect()
}
class HW.warriors.Infantryman {
+ String toString()
}
class HW.weapons.Axe {
+ int damage()
+ String toString()
}
interface HW.weapons.Melee {
}
class HW.protect.Armour {
+ int protect()
}
class HW.weapons.Bow {
+ int distance()
+ int damage()
+ String toString()
}
class HW.Team {
- List<T> team
+ void add(T)
+ Iterator<T> iterator()
+ int getTeamHealth()
+ int maxAttackDistance()
+ int getTeamAttack()
+ int getMinArmour()
+ String toString()
}
class HW.protect.Shield {
+ int protect()
+ String toString()
}
interface HW.weapons.Weapon {
~ int damage()
}
interface HW.weapons.Ranged {
~ int distance()
}
class HW.Battle {
- Warrior w1
- Warrior w2
+ void fight()
}
class HW.protect.ChainMail {
+ int protect()
}
abstract class HW.warriors.Warrior {
- String name
- int healthPoint
- W weapon
- S armour
+ S getArmour()
+ void setArmour(S)
+ String getName()
+ int getHealthPoint()
+ W getWeapon()
+ void setHealthPoint(int)
+ void setWeapon(W)
+ int hit()
+ int safe()
+ void reduceHealth(int)
+ String toString()
}
class HW.weapons.CrossBow {
+ int distance()
+ int damage()
+ String toString()
}


HW.weapons.Melee <|.. HW.weapons.Sword
HW.warriors.Warrior <|-- HW.warriors.Archer
HW.warriors.Warrior <|-- HW.warriors.Infantryman
HW.weapons.Melee <|.. HW.weapons.Axe
HW.weapons.Weapon <|-- HW.weapons.Melee
HW.protect.Protection <|.. HW.protect.Armour
HW.weapons.Ranged <|.. HW.weapons.Bow
HW.Iterable <|.. HW.Team
HW.protect.Protection <|.. HW.protect.Shield
HW.weapons.Weapon <|-- HW.weapons.Ranged
HW.protect.Protection <|.. HW.protect.ChainMail
HW.weapons.Ranged <|.. HW.weapons.CrossBow
@enduml